(def mylist LIST)
(let mylist (list 5 6 4 2 3 9 1 10 5))

(print "Original List:\n")
(print mylist "\n")



(function partition (params arr left right)
	(block
		(def i INTEGER) (def j INTEGER)(def tmp INTEGER)
		(def pivot INTEGER)
		(let i (clone left)) (let j (clone right))
	 
		(let pivot (nth arr (/ (+ left right) 2)))
		

		(while (<= i  j)
			(block
            	(while (< (nth arr i) pivot)(inc i))
                (while (> (nth arr j) pivot) (-- j)) 
			    (if (<= i  j) 
					(block
			        	(let tmp  (nth arr i))	
			            (set arr i (nth arr j))
			            (set arr j  tmp)
			            (++ i)
			            (-- j)
				    )
				)
			)
		)
		(return i)
	)
)


(function quicksort (params arr left right) 
	(block
		(def index INTEGER)
		(let index (partition arr left right))
		(if (< left  (- index 1))
		   (block
            	(quicksort arr left  (- index 1))
			)
		)

      	(if (< index right)
			(block
            	(quicksort arr  index  right)
			)
		)
	)
)

(quicksort mylist 0 (- (length mylist) 1))
(print "After sorting:\n")
(print mylist "\n")
(dump)
(gc)
(dump)

