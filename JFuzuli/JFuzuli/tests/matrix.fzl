#
# fuzuli : A general purpose interpreter
# Copyright (C) 2012 Mehmet Hakan Satman <mhsatman@yahoo.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

(require "math.nfl")

(class Matrix extends Object
		
		(def data LIST)
		(def n)
		(def m)


		(function create (params rows cols)
				(let n rows)
				(let m cols)
				(def i)(def j)
				(let data (: 1 rows))
				(for (let i 0) (< i rows) (++ i)
					(set data i (: 1 cols))
				)
				(fill data 0.0)
		)
		
		(function getData (params)
			(return data)
		)


		(function clear (params)
			(fill 0.0)
		)

		(function get (params row col)
			(return (nth (nth data row) col))
		)

		(function setValue (params row col value)
			(set (nth data row) col value)
		)

		(function transpose (params)
				(let tr (new Matrix))
				(tr.create m n)
				(for (let i 0) (< i n) (++ i)
					(for (let j 0) (< j m) (++ j)
						(tr.setValue j i (this.get i j))
						(print "*" (this.get i j))
					)
				)
				(print "Returning " tr)
				(return tr)
		)


		(function clonematrix (params)
				(let mat (new Matrix))
				(mat.create n m)
				(for (let i 0) (< i n) (++ i)
					(for (let j 0) (< j m) (++ j)
						(mat.setValue i j (this.get i j))
					)
				)
				(return mat)
		)

		(function echelon (params)
				(def temp LIST)
				(let i 0)(let j 0)(let k 0)
				(let temp (clonematrix))
				(def pivot FLOAT)
				(let cols m)
				(for (let i 0)(< i n)(++i)
					(for (let j (+ i 1))(< j m)(++j)
						(let pivot (/ (* -1 (temp.get j i)) (temp.get i i)))
						(for (let k 0)(< k cols)(++k)
							(temp.setValue j k (+ (* (temp.get i k) pivot) (temp.get j k)))
						)
					)
				)
				(return temp)
			
		)

		(function det (params)
			
				(let ech (echelon))
				(let determinant 1.0)
				(for (let i 0) (< i n) (++ i)
					(let determinant (* determinant (ech.get i i)))
				)
				(return determinant)
			
		)

		(function minor (params x y)
			
			  (let cnt 0)
				(let temp (clonematrix))
				(let newmat (new Matrix))
				(newmat.create (- n 1) (- m 1))
				(let myarr (: 0 (* (- n 1) (- m 1))))
				(for (let i 0) (< i n) (++ i)
					(for (let j 0) (< j m) (++ j)
						(if (and (!= i x) (!= j y))
							(block
								(set myarr cnt (temp.get i j))
								(++ cnt)
							)
						)
					)
				)
				(let cnt 0)
				(for (let i 0)(< i (- n 1))(++ i)
					(for (let j 0)(< j (- m 1))(++ j)
						(newmat.setValue i j (nth myarr cnt))
						(++ cnt)
					)
				)
				(return newmat)
			
		)

		(function inverse (params)
				(let determinant (det))
				(if (or (!= n m) (= determinant 0))
					(block
						(print "Cannot invert matrix\n")
						(return)
					)
				)
				(let temp (clonematrix))
				(let cofactor (new Matrix))
				(cofactor.create n m)
				(for (let j 0)(< j m)(++j)
					(for (let i 0)(< i n)(++i)
						(let mintemp (temp.minor i j))
						(let tempdet (mintemp.det))
						(cofactor.setValue i j tempdet)
					)
				)
				(let cofactor (cofactor.transpose))
				(for (let i 0)(< i n)(++ i)
					(for (let j 0)(< j m)(++ j)
						(let val (/ (* (cofactor.get i j) (pow -1.0 (+ i j))) determinant))
						(cofactor.setValue i j val)
					)
				)		
				(return cofactor)
			)	
		

	
)


(let passed "PASSED!\n")
(let error "ERROR\n")

(let a (new Matrix))
(a.create 2 2)
(a.setValue 0 0 1)(a.setValue 0 1 2)(a.setValue 1 0 3)(a.setValue 1 1 4)
(print "a is " a)

# TEST 1 - Transpose
(let trans (a.transpose))
(print trans)

(if (and (= (trans.get 0 0) 1)
				 (= (trans.get 0 1) 3)
				 (= (trans.get 1 0) 2)
				 (= (trans.get 1 1) 4)
		)
	(print passed)
	(print error)
)

# TEST 2 - Clone
(let klon (a.clonematrix))
(if (and (= (klon.get 0 0) 1)
         (= (klon.get 0 1) 2)
         (= (klon.get 1 0) 3)
         (= (klon.get 1 1) 4)
    )
  (print passed)
  (print error)
)


# TEST 3 - Echelon
(let echelon (a.echelon))
#(println "Echelon is " (echelon.getData))
(if (and (= (echelon.get 0 0) 1)
         (= (echelon.get 0 1) 2)
         (= (echelon.get 1 0) 0)
         (= (echelon.get 1 1) -2)
    )
  (print passed)
  (print error)
)


# TEST 4 - Determinant
(let det (a.det))
#(println "Determinant is " det)
(if (= det -2)
  (print passed)
  (print error)
)


# TEST 5 - Minor
(let minor (a.minor 0 0))
#(println "Minor is " (minor.getData))
(if (= (minor.get 0 0) 4)
	(print passed)
	(print error)
)


# TEST 6 - Inverse
(let inverse (a.inverse))
(if (and (= (inverse.get 0 0) -2)
         (= (inverse.get 0 1) 1)
         (= (inverse.get 1 0) 1.5)
         (= (inverse.get 1 1) -0.5)
    )
  (print passed)
  (print error)
)
#(println "Inverse: " (inverse.getData) "\n")
