#
# fuzuli : A general purpose interpreter
# Copyright (C) 2012 Mehmet Hakan Satman <mhsatman@yahoo.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


(let passed "PASSED!\n")
(let error "ERROR\n")

(def mylist LIST)
(let mylist (list 5 6 4 2 3 9 1 10 5))

#(print "Original List:\n")
#(print mylist "\n")


(function partition (params arr left right)
	(block		
		(def i INTEGER) (def j INTEGER)(def tmp INTEGER)
		(def pivot INTEGER)
		(let i left) (let j right)
	 
		(let pivot (nth arr (/ (+ left right) 2)))
		

		(while (<= i  j)
			(block
            	(while (< (nth arr i) pivot)(inc i))
                (while (> (nth arr j) pivot) (-- j)) 
			    (if (<= i  j) 
					(block
			        	(let tmp  (nth arr i))	
			            (set arr i (nth arr j))
			            (set arr j  tmp)
			            (++ i)
			            (-- j)
				    )
				)
			)
		)
		(return i)
	)
)


(function quicksort (params arr left right) 
	(block
		(def index INTEGER)
		(let index (partition arr left right))
		(if (< left  (- index 1))
		   (block
            	(quicksort arr left  (- index 1))
			)
		)

      	(if (< index right)
			(block
            	(quicksort arr  index  right)
			)
		)
	)
)

(quicksort mylist 0 (- (length mylist) 1))
#(print "After sorting:\n")
#(print mylist "\n")
(if (and
        (= (nth mylist 0) 1)
        (= (nth mylist 1) 2)
        (= (nth mylist 2) 3)
        (= (nth mylist 3) 4)
        (= (nth mylist 4) 5)
        (= (nth mylist 5) 5)
        (= (nth mylist 6) 6)
        (= (nth mylist 7) 9)
        (= (nth mylist 8) 10)
    )
(print passed)
(print error)
)


